#!/usr/bin/env perl
use v5.26;
use strict;
use warnings;

# This is like pod2github or pod2markdown, but takes a list of filename(s)
# as arguments and outputs markdown documents in the right location(s)
# using the right arguments for Conch.

# Usage:
# misc/pod2githubpages <filename> [filename ... ]

use Pod::Markdown::Github;
use Class::Method::Modifiers 'around';

my %opts = (
    output_encoding => 'UTF-8',
    local_module_re => qr/Conch/,
    local_module_url_prefix => '../modules/', # '' is better but Pod::Markdown doesn't respect it
                                        # see https://rt.cpan.org/Ticket/Display.html?id=129865
);

around 'Pod::Markdown::format_perldoc_url' => sub {
    my $orig = shift;
    my $self = shift;

    my $url = $self->$orig(@_);
    if ($url =~ /^\Q${\ $self->perldoc_url_prefix }\E/ and -x "bin/$'") {
        $url = '../scripts/'.$';
    }
    return $url;
};

my (@module_files, @bin_files);

mkdir 'docs/modules' if not -d 'docs/modules';
mkdir 'docs/scripts' if not -d 'docs/scripts';

while (my $infile = shift @ARGV) {
    # convert:                          lib/Conch/Time.pm            and  bin/conch-db
    # to:                               docs/modules/Conch::Time.md  and  docs/scripts/conch-db.md
    # containing pod links like:        L<Conch::Time>               and  L<conch-db>
    # become relative URLs like:        ../modules/Conch::Time       and  ../scripts/conch-db
    # that turn into the absolute urls: https://joyent.github.io/conch/modules/Conch::Time
    # ...and:                           http://localhost:4000/modules/Conch::Time


    my $outfile = $infile;
    if ($outfile =~ s{^lib/}{}) {
        $outfile =~ s{/}{::}g;
        $outfile =~ s/\.pm$/\.md/;
        push @module_files, $outfile;
        $outfile = 'docs/modules/'.$outfile;
    }
    elsif ($outfile =~ s{^bin/}{}) {
        $outfile =~ s/$/\.md/;
        push @bin_files, $outfile;
        $outfile = 'docs/scripts/'.$outfile;
    }

    my $in_fh  = get_handle($infile, '<', \*STDIN);
    my $out_fh = get_handle($outfile, '>', \*STDOUT);

    # Undo any PERL_UNICODE effects.
    # Pod::Simple expects to receive bytes, and we're going to return bytes.
    binmode($_, ':bytes') for ($in_fh, $out_fh);

    convert($in_fh, $out_fh);
}

my $footer = <<'FOOTER';

# Copyright / License

Copyright Joyent, Inc.

This Source Code Form is subject to the terms of the Mozilla Public License,
v.2.0. If a copy of the MPL was not distributed with this file, you can
obtain one at <http://mozilla.org/MPL/2.0/>.
FOOTER

{
    open my $fh, '>', 'docs/modules/index.md'
        or die "cannot open docs/modules/index.md for writing: $!";

    print $fh "# Module documentation\n\n";

    foreach my $filename (sort @module_files) {
        my $module = $filename =~ s/.md$//r;
        print $fh '* [', $module, '](../modules/', $module, ")\n";
    }

    print $fh $footer;
    close $fh;
}

{
    open my $fh, '>', 'docs/scripts/index.md'
        or die "cannot open docs/scripts/index.md for writing: $!";

    print $fh "# Executable documentation (in `bin/`)\n\n";

    foreach my $filename (sort @bin_files) {
        my $exe = $filename =~ s/.md$//r;
        print $fh '* [', $exe, '](../scripts/', $exe, ")\n";
    }

    print $fh $footer;
    close $fh;
}

sub convert {
    my ($in_file, $out_file) = @_;
    my $parser = Pod::Markdown::Github->new(%opts);
    $parser->output_fh($out_file);
    $parser->parse_file($in_file);
}

sub get_handle {
  my ($path, $op, $default) = @_;
  (!defined($path) || $path eq '-') ? $default : do {
    open(my $fh, $op, $path)
      or die "Failed to open '$path': $!\n";
    $fh;
  };
}
