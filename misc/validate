#!/usr/bin/env perl
use 5.12.1;
use warnings;
use open ':std', ':encoding(UTF-8)'; # force stdin, stdout, stderr into utf8

use Getopt::Long;
use JSON::Validator;
use Mojo::File 'path';
use Mojo::JSON 'decode_json';
use Pod::Usage;

my $schema_url = 'https://conch.joyent.us/schema/request';
my $name       = 'DeviceReport';

GetOptions(
    'base_url|u:s'    => \$schema_url,
    'schema_file|f:s' => \my $schema_file,
    'schema|s:s'      => \$name,
    'report|r:s'      => \my $report,
    'help|h'          => \my $help,
);

pod2usage(1) if $help;

my $validator = JSON::Validator->new;

if ($schema_file){
    my $schema = path($schema_file)->to_abs;
    $validator->load_and_validate_schema($schema);
}
else {
    $validator->load_and_validate_schema("$schema_url/$name");
}

$report = decode_json(
    defined $report ? path($report)->slurp : do { local $/; <> }
);

my $schema = $validator->get($name);
if (my @errors = $validator->validate($report, $schema)) {
    say STDERR $_ for @errors;
    die;
}

say 'ok';

__END__

=head1 NAME

validate - validate a device report (or other json document) against conch json schemas

=head1 SYNOPSIS

    validate [-u URL ] [-s SCHEMA] [-f FILE] [-h] REPORT

=head1 OPTIONS

=over 4

=item <-u URL>

A URL for the JSON Schema to validate against. Defaults to L<https://conch.joyent.us/schema/request/>

=item <-s SCHEMA>

Name of the embedded schema to validate against. Defaults to C<DeviceReport>.

=item <-r REPORT>

File name of the report data to validate against. Defaults to STDIN.

=item <-f FILE>

A file containing the schema to validate against.

=item <-h>

This help text.

=back
