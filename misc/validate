#!/usr/bin/env perl
use 5.12.1;
use warnings;
use open ':std', ':encoding(UTF-8)'; # force stdin, stdout, stderr into utf8

use Getopt::Long;
use JSON::Schema::Draft201909 0.020;
use Mojo::File 'path';
use JSON::MaybeXS 'decode_json';
use Pod::Usage;

my $schema_url = 'https://conch.joyent.us/json_schema/request';
my $name       = 'DeviceReport';

GetOptions(
    'base_url|u:s'    => \$schema_url,
    'schema_file|f:s' => \my $schema_file,
    'schema|s:s'      => \$name,
    'report|r:s'      => \my $report,
    'help|h'          => \my $help,
);

pod2usage(1) if $help;

my $js = JSON::Schema::Draft201909->new;

my $schema = $schema_file ? $schema_file : "$schema_url/$name";
$js->add_schema($schema);

$report = decode_json(
    defined $report ? path($report)->slurp : do { local $/; <> }
);

my $encoder = JSON::MaybeXS->new(allow_nonref => 1, utf8 => 0, convert_blessed => 1, canonical => 1, pretty => 1);

my $result = $js->evaluate($report, $schema);
say $encoder->encode($result);
die if not $result;

say 'ok';

__END__

=head1 NAME

validate - validate a device report (or other json document) against conch json schemas

=head1 SYNOPSIS

    validate [-u URL ] [-s SCHEMA] [-f FILE] [-h] REPORT

=head1 OPTIONS

=over 4

=item <-u URL>

A URL for the JSON Schema to validate against. Defaults to L<https://conch.joyent.us/json_schema/request/>

=item <-s SCHEMA>

Name of the embedded schema to validate against. Defaults to C<DeviceReport>.

=item <-r REPORT>

File name of the report data to validate against. Defaults to STDIN.

=item <-f FILE>

A file containing the schema to validate against.

=item <-h>

This help text.

=back
