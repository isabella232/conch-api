#!/usr/bin/env perl
use 5.26.1;
use experimental 'signatures';

use Getopt::Long;
use Pod::Usage;
use YAML::XS qw(LoadFile);
use JSON::MaybeXS ();
use Mojo::File qw(path);
use Data::Visitor::Tiny qw(visit);
use Dir::Self;

my $schema_file = __DIR__.'/../json-schema/input.yaml';

GetOptions(
	'file|f:s' => \$schema_file,
	'help|h'   => \my $help,
    'output|to:s' => \my $to,
);
pod2usage(1) if $help;

my %schemas = LoadFile($schema_file)->{definitions}->%*;

sub inline_ref ( $ref, $schema ) {

	# #/definitions/ValidationStateWithResults
	my ($other) = $ref =~ m|#?/definitions/(\w+)$|;
	$schema->{definitions}{$other} = $schemas{$other};
}

sub output_json_schema ( $name, $schema ) {
    my $json = JSON::MaybeXS->new(pretty => 1, canonical => 1);
    if ($to) {
        path($to)->make_path;
        path("$to/$name.schema.json")->spurt($json->encode($schema));
    } else {
        say "$name.schema.json";
        say $json->encode($schema);
        say;
    }
}

for my $name (sort keys %schemas) {
	my $schema = $schemas{$name};
	visit $schema => sub ( $key, $ref, @ ) {
		inline_ref( $_ => $schema ) if $key eq '$ref';
		if ( !defined $_ && $key eq "type" ) {
			$$ref = "null";
		}
	};
	$schema->{title} //= $name;
	$schema->{'$schema'} = 'http://json-schema.org/draft-07/schema#';
	$schema->{'$id'}     = "urn:$name.schema.json";

	output_json_schema $name, $schema;
}

__END__

=head1 NAME

extract-schema - extracts embedded JSON schemas from a combined (YAML) schema

=head1 SYNOPSIS

    extract-schema [-f FILE] [-o DIR] [-h]

=head1 DESCRIPTION

Given a single YAML file containing a number of JSON schema definitions, creates a separate
C<$name.schema.json> file for each definition, conforming to the same JSON specification
as the original file.

=head1 OPTIONS

=over 4

=item B<--file|-f FILE>

The base file for extracting from; defaulting to the C<json-schema/input.yaml> in this
repository.

=item B<--output|--to DIR>

The directory in which to create the json files.  If not provided, all content is emitted to
STDOUT, preceded by each definition's filename.

=item B<-h>

Provide this help text.

=back

