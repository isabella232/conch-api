#!/usr/bin/env perl
use 5.26.1;
use experimental 'signatures';
use open ':std', ':encoding(UTF-8)'; # force stdin, stdout, stderr into utf8

use Getopt::Long;
use Pod::Usage;
use JSON::MaybeXS ();
use Mojo::File 'path';
use JSON::Validator;

use Dir::Self;
use lib __DIR__ =~ s{/misc}{}r . '/lib';

use Conch::Controller::Schema;

my $schema_file = __DIR__.'/../json-schema/request.yaml';

GetOptions(
    'file|f:s' => \$schema_file,
    'help|h'   => \my $help,
    'output|to:s' => \my $to,
);
pod2usage(1) if $help;

sub output_json_schema ($name, $schema) {
    my $json = JSON::MaybeXS->new(pretty => 1, canonical => 1);
    if ($to) {
        path($to)->make_path;
        path("$to/$name.schema.json")->spurt($json->encode($schema));
    }
    else {
        say "$name.schema.json";
        say $json->encode($schema);
        say;
    }
}

my $validator = JSON::Validator->new;
# TODO: do not pass 'schema' arg - just depend on JV <nextversion>
$validator->load_and_validate_schema($schema_file, { schema => 'http://json-schema.org/draft-07/schema#' });

for my $schema_name (sort keys $validator->schema->data->{definitions}->%*) {
    my $schema = Conch::Controller::Schema::_extract_schema_definition($validator, $schema_name);
    output_json_schema($schema_name, $schema);
}

__END__

=head1 NAME

extract-schema - extracts embedded JSON schemas from a combined (YAML) schema

=head1 SYNOPSIS

    extract-schema [-f FILE] [-o DIR] [-h]

=head1 DESCRIPTION

Given a single YAML file containing a number of JSON schema definitions, creates a separate
C<$name.schema.json> file for each definition, conforming to the same JSON specification
as the original file.

=head1 OPTIONS

=over 4

=item B<--file|-f FILE>

The base file for extracting from; defaulting to the C<json-schema/request.yaml> in this
repository.

=item B<--output|--to DIR>

The directory in which to create the json files. If not provided, all content is emitted to
STDOUT, preceded by each definition's filename.

=item B<-h>

Provide this help text.

=back
